# ============================================================================
# APPLICATIONS REPOSITORY
# ============================================================================
# This file was auto-generated on: 2025-10-08 23:21:42 WAT
# It contains asynchronous functions for managing access to the database
# in a MongoDB database using FastAPI.
#
# DO NOT EDIT THIS FILE MANUALLY - RE-RUN THE GENERATOR INSTEAD. OR IF YOU WANT TO EDIT JUST ADD LEAVE OTHER FUNCTIONS THE WAY YOU MET THEM
# ============================================================================

from pymongo import ReturnDocument
from core.database import db
from fastapi import HTTPException,status
from typing import List,Optional
from schemas.applications import ApplicationsUpdate, ApplicationsCreate, ApplicationsOut

async def create_applications(applications_data: ApplicationsCreate) -> ApplicationsOut:
    applications_dict = applications_data.model_dump()
    result =await db.applicationss.insert_one(applications_dict)
    result = await db.applicationss.find_one(filter={"_id":result.inserted_id})
    returnable_result = ApplicationsOut(**result)
    return returnable_result

async def get_applications(filter_dict: dict) -> Optional[ApplicationsOut]:
    try:
        result = await db.applicationss.find_one(filter_dict)

        if result is None:
            return None

        return ApplicationsOut(**result)

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An error occurred while fetching applications: {str(e)}"
        )
    
async def get_applicationss(filter_dict: dict = {},start=0,stop=100) -> List[ApplicationsOut]:
    try:
        if filter_dict is None:
            filter_dict = {}

        cursor = (db.applicationss.find(filter_dict)
        .skip(start)
        .limit(stop - start)
        )
        applications_list = []

        async for doc in cursor:
            applications_list.append(ApplicationsOut(**doc))

        return applications_list

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An error occurred while fetching applicationss: {str(e)}"
        )
async def update_applications(filter_dict: dict, applications_data: ApplicationsUpdate) -> ApplicationsOut:
    result = await db.applicationss.find_one_and_update(
        filter_dict,
        {"$set": applications_data.model_dump(exclude_none=True)},
        return_document=ReturnDocument.AFTER
    )
    returnable_result = ApplicationsOut(**result)
    return returnable_result

async def delete_applications(filter_dict: dict):
    return await db.applicationss.delete_one(filter_dict)